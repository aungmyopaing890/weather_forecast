// Mocks generated by Mockito 5.4.5 from annotations
// in weather_forecast/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:convert' as _i19;
import 'dart:typed_data' as _i21;

import 'package:flutter_bloc/flutter_bloc.dart' as _i15;
import 'package:http/http.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i20;
import 'package:weather_forecast/features/weather/data/enum/temperature_unit_enum.dart'
    as _i16;
import 'package:weather_forecast/features/weather/domain/data_sources/weather_api_service.dart'
    as _i10;
import 'package:weather_forecast/features/weather/domain/entity/hourly_weather_entity.dart'
    as _i12;
import 'package:weather_forecast/features/weather/domain/entity/weather_entity.dart'
    as _i2;
import 'package:weather_forecast/features/weather/domain/repository/weather_repository.dart'
    as _i3;
import 'package:weather_forecast/features/weather/domain/usecases/fetch_hourly_weather_usecase.dart'
    as _i4;
import 'package:weather_forecast/features/weather/domain/usecases/fetch_weather_usecase.dart'
    as _i7;
import 'package:weather_forecast/features/weather/presentation/bloc/bloc/hourly_weather_bloc.dart'
    as _i13;
import 'package:weather_forecast/features/weather/presentation/bloc/bloc/temperature_unit_cubit.dart'
    as _i5;
import 'package:weather_forecast/features/weather/presentation/bloc/bloc/weather_bloc.dart'
    as _i17;
import 'package:weather_forecast/features/weather/presentation/bloc/event/hourly_weather_event.dart'
    as _i14;
import 'package:weather_forecast/features/weather/presentation/bloc/event/weather_event.dart'
    as _i18;
import 'package:weather_forecast/features/weather/presentation/bloc/state/hourly_weather_state.dart'
    as _i6;
import 'package:weather_forecast/features/weather/presentation/bloc/state/weather_state.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherEntity_0 extends _i1.SmartFake implements _i2.WeatherEntity {
  _FakeWeatherEntity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWeatherRepository_1 extends _i1.SmartFake
    implements _i3.WeatherRepository {
  _FakeWeatherRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFetchHourlyWeatherUseCase_2 extends _i1.SmartFake
    implements _i4.FetchHourlyWeatherUseCase {
  _FakeFetchHourlyWeatherUseCase_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTemperatureUnitCubit_3 extends _i1.SmartFake
    implements _i5.TemperatureUnitCubit {
  _FakeTemperatureUnitCubit_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHourlyWeatherState_4 extends _i1.SmartFake
    implements _i6.HourlyWeatherState {
  _FakeHourlyWeatherState_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFetchWeatherUseCase_5 extends _i1.SmartFake
    implements _i7.FetchWeatherUseCase {
  _FakeFetchWeatherUseCase_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWeatherState_6 extends _i1.SmartFake implements _i8.WeatherState {
  _FakeWeatherState_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_7 extends _i1.SmartFake implements _i9.Response {
  _FakeResponse_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_8 extends _i1.SmartFake
    implements _i9.StreamedResponse {
  _FakeStreamedResponse_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WeatherApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherApiService extends _i1.Mock implements _i10.WeatherApiService {
  MockWeatherApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.WeatherEntity> fetchWeather(String? city) =>
      (super.noSuchMethod(
            Invocation.method(#fetchWeather, [city]),
            returnValue: _i11.Future<_i2.WeatherEntity>.value(
              _FakeWeatherEntity_0(
                this,
                Invocation.method(#fetchWeather, [city]),
              ),
            ),
          )
          as _i11.Future<_i2.WeatherEntity>);

  @override
  _i11.Future<List<_i12.HourlyWeatherEntity>> fetchHourlyWeather(
    String? city,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchHourlyWeather, [city]),
            returnValue: _i11.Future<List<_i12.HourlyWeatherEntity>>.value(
              <_i12.HourlyWeatherEntity>[],
            ),
          )
          as _i11.Future<List<_i12.HourlyWeatherEntity>>);
}

/// A class which mocks [FetchWeatherUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchWeatherUseCase extends _i1.Mock
    implements _i7.FetchWeatherUseCase {
  MockFetchWeatherUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.WeatherRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWeatherRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.WeatherRepository);

  @override
  _i11.Future<_i2.WeatherEntity> call(String? city) =>
      (super.noSuchMethod(
            Invocation.method(#call, [city]),
            returnValue: _i11.Future<_i2.WeatherEntity>.value(
              _FakeWeatherEntity_0(this, Invocation.method(#call, [city])),
            ),
          )
          as _i11.Future<_i2.WeatherEntity>);
}

/// A class which mocks [FetchHourlyWeatherUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchHourlyWeatherUseCase extends _i1.Mock
    implements _i4.FetchHourlyWeatherUseCase {
  MockFetchHourlyWeatherUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.WeatherRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWeatherRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.WeatherRepository);

  @override
  _i11.Future<List<_i12.HourlyWeatherEntity>> call(String? city) =>
      (super.noSuchMethod(
            Invocation.method(#call, [city]),
            returnValue: _i11.Future<List<_i12.HourlyWeatherEntity>>.value(
              <_i12.HourlyWeatherEntity>[],
            ),
          )
          as _i11.Future<List<_i12.HourlyWeatherEntity>>);
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i3.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.WeatherEntity> fetchWeather(String? city) =>
      (super.noSuchMethod(
            Invocation.method(#fetchWeather, [city]),
            returnValue: _i11.Future<_i2.WeatherEntity>.value(
              _FakeWeatherEntity_0(
                this,
                Invocation.method(#fetchWeather, [city]),
              ),
            ),
          )
          as _i11.Future<_i2.WeatherEntity>);

  @override
  _i11.Future<List<_i12.HourlyWeatherEntity>> fetchHourlyWeather(
    String? city,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchHourlyWeather, [city]),
            returnValue: _i11.Future<List<_i12.HourlyWeatherEntity>>.value(
              <_i12.HourlyWeatherEntity>[],
            ),
          )
          as _i11.Future<List<_i12.HourlyWeatherEntity>>);
}

/// A class which mocks [HourlyWeatherBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHourlyWeatherBloc extends _i1.Mock implements _i13.HourlyWeatherBloc {
  MockHourlyWeatherBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FetchHourlyWeatherUseCase get fetchWeatherUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#fetchWeatherUseCase),
            returnValue: _FakeFetchHourlyWeatherUseCase_2(
              this,
              Invocation.getter(#fetchWeatherUseCase),
            ),
          )
          as _i4.FetchHourlyWeatherUseCase);

  @override
  _i5.TemperatureUnitCubit get unitCubit =>
      (super.noSuchMethod(
            Invocation.getter(#unitCubit),
            returnValue: _FakeTemperatureUnitCubit_3(
              this,
              Invocation.getter(#unitCubit),
            ),
          )
          as _i5.TemperatureUnitCubit);

  @override
  _i6.HourlyWeatherState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeHourlyWeatherState_4(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i6.HourlyWeatherState);

  @override
  _i11.Stream<_i6.HourlyWeatherState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i11.Stream<_i6.HourlyWeatherState>.empty(),
          )
          as _i11.Stream<_i6.HourlyWeatherState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i11.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);

  @override
  void add(_i14.HourlyWeatherEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i14.HourlyWeatherEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i6.HourlyWeatherState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i14.HourlyWeatherEvent>(
    _i15.EventHandler<E, _i6.HourlyWeatherState>? handler, {
    _i15.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i15.Transition<_i14.HourlyWeatherEvent, _i6.HourlyWeatherState>?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i15.Change<_i6.HourlyWeatherState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TemperatureUnitCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTemperatureUnitCubit extends _i1.Mock
    implements _i5.TemperatureUnitCubit {
  MockTemperatureUnitCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.TemperatureUnit get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i16.TemperatureUnit.celsius,
          )
          as _i16.TemperatureUnit);

  @override
  _i11.Stream<_i16.TemperatureUnit> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i11.Stream<_i16.TemperatureUnit>.empty(),
          )
          as _i11.Stream<_i16.TemperatureUnit>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void toggleUnit() => super.noSuchMethod(
    Invocation.method(#toggleUnit, []),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i16.TemperatureUnit? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i15.Change<_i16.TemperatureUnit>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);
}

/// A class which mocks [WeatherBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherBloc extends _i1.Mock implements _i17.WeatherBloc {
  MockWeatherBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.FetchWeatherUseCase get fetchWeatherUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#fetchWeatherUseCase),
            returnValue: _FakeFetchWeatherUseCase_5(
              this,
              Invocation.getter(#fetchWeatherUseCase),
            ),
          )
          as _i7.FetchWeatherUseCase);

  @override
  _i5.TemperatureUnitCubit get unitCubit =>
      (super.noSuchMethod(
            Invocation.getter(#unitCubit),
            returnValue: _FakeTemperatureUnitCubit_3(
              this,
              Invocation.getter(#unitCubit),
            ),
          )
          as _i5.TemperatureUnitCubit);

  @override
  _i8.WeatherState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeWeatherState_6(this, Invocation.getter(#state)),
          )
          as _i8.WeatherState);

  @override
  _i11.Stream<_i8.WeatherState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i11.Stream<_i8.WeatherState>.empty(),
          )
          as _i11.Stream<_i8.WeatherState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i11.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);

  @override
  void add(_i18.WeatherEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i18.WeatherEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i8.WeatherState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i18.WeatherEvent>(
    _i15.EventHandler<E, _i8.WeatherState>? handler, {
    _i15.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i15.Transition<_i18.WeatherEvent, _i8.WeatherState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i15.Change<_i8.WeatherState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i9.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i9.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i11.Future<_i9.Response>.value(
              _FakeResponse_7(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i11.Future<_i9.Response>);

  @override
  _i11.Future<_i9.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i11.Future<_i9.Response>.value(
              _FakeResponse_7(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i11.Future<_i9.Response>);

  @override
  _i11.Future<_i9.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i11.Future<_i9.Response>.value(
              _FakeResponse_7(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i11.Future<_i9.Response>);

  @override
  _i11.Future<_i9.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i11.Future<_i9.Response>.value(
              _FakeResponse_7(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i11.Future<_i9.Response>);

  @override
  _i11.Future<_i9.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i11.Future<_i9.Response>.value(
              _FakeResponse_7(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i11.Future<_i9.Response>);

  @override
  _i11.Future<_i9.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i11.Future<_i9.Response>.value(
              _FakeResponse_7(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i11.Future<_i9.Response>);

  @override
  _i11.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i11.Future<String>.value(
              _i20.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i11.Future<String>);

  @override
  _i11.Future<_i21.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i11.Future<_i21.Uint8List>.value(_i21.Uint8List(0)),
          )
          as _i11.Future<_i21.Uint8List>);

  @override
  _i11.Future<_i9.StreamedResponse> send(_i9.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i11.Future<_i9.StreamedResponse>.value(
              _FakeStreamedResponse_8(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i11.Future<_i9.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i9.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i9.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i11.Future<_i9.Response>.value(
              _FakeResponse_7(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i11.Future<_i9.Response>);

  @override
  _i11.Future<_i9.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i11.Future<_i9.Response>.value(
              _FakeResponse_7(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i11.Future<_i9.Response>);

  @override
  _i11.Future<_i9.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i11.Future<_i9.Response>.value(
              _FakeResponse_7(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i11.Future<_i9.Response>);

  @override
  _i11.Future<_i9.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i11.Future<_i9.Response>.value(
              _FakeResponse_7(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i11.Future<_i9.Response>);

  @override
  _i11.Future<_i9.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i11.Future<_i9.Response>.value(
              _FakeResponse_7(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i11.Future<_i9.Response>);

  @override
  _i11.Future<_i9.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i11.Future<_i9.Response>.value(
              _FakeResponse_7(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i11.Future<_i9.Response>);

  @override
  _i11.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i11.Future<String>.value(
              _i20.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i11.Future<String>);

  @override
  _i11.Future<_i21.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i11.Future<_i21.Uint8List>.value(_i21.Uint8List(0)),
          )
          as _i11.Future<_i21.Uint8List>);

  @override
  _i11.Future<_i9.StreamedResponse> send(_i9.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i11.Future<_i9.StreamedResponse>.value(
              _FakeStreamedResponse_8(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i11.Future<_i9.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}
